// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PushThenPause.Data;

#nullable disable

namespace PushThenPause.Data.Migrations
{
    [DbContext(typeof(PushThenPauseDbContext))]
    [Migration("20250414191153_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("PushThenPause.Data.BreakActivity", b =>
                {
                    b.Property<int>("BreakActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MoodTag")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BreakActivityId");

                    b.HasIndex("userId");

                    b.ToTable("BreakActivities");
                });

            modelBuilder.Entity("PushThenPause.Data.Cycle", b =>
                {
                    b.Property<int>("CycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BreakActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CycleId");

                    b.HasIndex("BreakActivityId");

                    b.HasIndex("TaskId");

                    b.HasIndex("userId");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("PushThenPause.Data.NemsModeSettings", b =>
                {
                    b.Property<int>("NemsModeSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EncouragementFrequency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NemsModeSettingsId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("NemsModeSettings");
                });

            modelBuilder.Entity("PushThenPause.Data.StreakTracker", b =>
                {
                    b.Property<int>("StreakTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BreaksTaken")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("StepsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StreakTrackerId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("StreakTrackers");
                });

            modelBuilder.Entity("PushThenPause.Data.TaskCategory", b =>
                {
                    b.Property<int>("TaskCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TaskCategoryId");

                    b.ToTable("TaskCategories");
                });

            modelBuilder.Entity("PushThenPause.Data.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PushThenPause.Data.UserTask", b =>
                {
                    b.Property<int>("UserTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserTaskId");

                    b.HasIndex("TaskCategoryId");

                    b.HasIndex("userId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("PushThenPause.Data.BreakActivity", b =>
                {
                    b.HasOne("PushThenPause.Data.User", "User")
                        .WithMany("BreakActivities")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PushThenPause.Data.Cycle", b =>
                {
                    b.HasOne("PushThenPause.Data.BreakActivity", "BreakActivity")
                        .WithMany("Cycles")
                        .HasForeignKey("BreakActivityId");

                    b.HasOne("PushThenPause.Data.UserTask", "Task")
                        .WithMany("Cycles")
                        .HasForeignKey("TaskId");

                    b.HasOne("PushThenPause.Data.User", "User")
                        .WithMany("Cycles")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BreakActivity");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PushThenPause.Data.NemsModeSettings", b =>
                {
                    b.HasOne("PushThenPause.Data.User", "User")
                        .WithOne("NemsModeSettings")
                        .HasForeignKey("PushThenPause.Data.NemsModeSettings", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PushThenPause.Data.StreakTracker", b =>
                {
                    b.HasOne("PushThenPause.Data.User", "User")
                        .WithOne("StreakTracker")
                        .HasForeignKey("PushThenPause.Data.StreakTracker", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PushThenPause.Data.UserTask", b =>
                {
                    b.HasOne("PushThenPause.Data.TaskCategory", "TaskCategory")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PushThenPause.Data.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PushThenPause.Data.BreakActivity", b =>
                {
                    b.Navigation("Cycles");
                });

            modelBuilder.Entity("PushThenPause.Data.TaskCategory", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("PushThenPause.Data.User", b =>
                {
                    b.Navigation("BreakActivities");

                    b.Navigation("Cycles");

                    b.Navigation("NemsModeSettings");

                    b.Navigation("StreakTracker");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("PushThenPause.Data.UserTask", b =>
                {
                    b.Navigation("Cycles");
                });
#pragma warning restore 612, 618
        }
    }
}
